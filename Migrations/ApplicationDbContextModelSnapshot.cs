// <auto-generated />
using System;
using ComicReaderBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ComicReaderBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ComicReaderBackend.Models.Comic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aprobado")
                        .HasColumnType("boolean");

                    b.Property<int?>("AprobadoPorId")
                        .HasColumnType("integer");

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("FechaAprobacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaSubida")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Formato")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("NumeroCapitulo")
                        .HasColumnType("integer");

                    b.Property<int?>("NumeroVolumen")
                        .HasColumnType("integer");

                    b.Property<string>("RutaArchivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RutaMiniatura")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("SerieId")
                        .HasColumnType("integer");

                    b.Property<int>("SubidoPorId")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("TituloCapitulo")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("AprobadoPorId");

                    b.HasIndex("SerieId");

                    b.HasIndex("SubidoPorId");

                    b.ToTable("Comics");
                });

            modelBuilder.Entity("ComicReaderBackend.Models.Favorito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComicId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaAgregado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.HasIndex("UserId", "ComicId")
                        .IsUnique();

                    b.ToTable("Favoritos");
                });

            modelBuilder.Entity("ComicReaderBackend.Models.HistorialLectura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComicId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaLectura")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PaginaActual")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.HasIndex("UserId");

                    b.ToTable("HistorialLecturas");
                });

            modelBuilder.Entity("ComicReaderBackend.Models.Serie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnoPublicacion")
                        .HasColumnType("integer");

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CreadoPorId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Estado")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Genero")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RutaPortada")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreadoPorId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("ComicReaderBackend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ComicReaderBackend.Models.Voto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ComicId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaVoto")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.HasIndex("UserId", "ComicId")
                        .IsUnique();

                    b.ToTable("Votos");
                });

            modelBuilder.Entity("ComicReaderBackend.Models.Comic", b =>
                {
                    b.HasOne("ComicReaderBackend.Models.User", "AprobadoPor")
                        .WithMany()
                        .HasForeignKey("AprobadoPorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ComicReaderBackend.Models.Serie", "Serie")
                        .WithMany("Comics")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ComicReaderBackend.Models.User", "SubidoPor")
                        .WithMany("ComicsSubidos")
                        .HasForeignKey("SubidoPorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AprobadoPor");

                    b.Navigation("Serie");

                    b.Navigation("SubidoPor");
                });

            modelBuilder.Entity("ComicReaderBackend.Models.Favorito", b =>
                {
                    b.HasOne("ComicReaderBackend.Models.Comic", "Comic")
                        .WithMany("Favoritos")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComicReaderBackend.Models.User", "User")
                        .WithMany("Favoritos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ComicReaderBackend.Models.HistorialLectura", b =>
                {
                    b.HasOne("ComicReaderBackend.Models.Comic", "Comic")
                        .WithMany("HistorialLecturas")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComicReaderBackend.Models.User", "User")
                        .WithMany("HistorialLecturas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ComicReaderBackend.Models.Serie", b =>
                {
                    b.HasOne("ComicReaderBackend.Models.User", "CreadoPor")
                        .WithMany()
                        .HasForeignKey("CreadoPorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreadoPor");
                });

            modelBuilder.Entity("ComicReaderBackend.Models.Voto", b =>
                {
                    b.HasOne("ComicReaderBackend.Models.Comic", "Comic")
                        .WithMany("Votos")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComicReaderBackend.Models.User", "User")
                        .WithMany("Votos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ComicReaderBackend.Models.Comic", b =>
                {
                    b.Navigation("Favoritos");

                    b.Navigation("HistorialLecturas");

                    b.Navigation("Votos");
                });

            modelBuilder.Entity("ComicReaderBackend.Models.Serie", b =>
                {
                    b.Navigation("Comics");
                });

            modelBuilder.Entity("ComicReaderBackend.Models.User", b =>
                {
                    b.Navigation("ComicsSubidos");

                    b.Navigation("Favoritos");

                    b.Navigation("HistorialLecturas");

                    b.Navigation("Votos");
                });
#pragma warning restore 612, 618
        }
    }
}
